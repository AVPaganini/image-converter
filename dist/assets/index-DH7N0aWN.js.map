{"version":3,"mappings":"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","names":["f","require$$0","k","Symbol","for","l","m","Object","prototype","hasOwnProperty","n","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","p","key","ref","__self","__source","q","c","a","g","b","d","e","h","call","defaultProps","$$typeof","type","props","_owner","current","reactJsxRuntime_production_min","jsx","jsxs","jsxRuntimeModule","exports","createRoot","hydrateRoot","downloadBlob","blob","fileName","url","URL","createObjectURL","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","formatFileSize","bytes","units","size","unitIndex","length","toFixed","calculateSavings","originalSize","convertedSize","percentage","Math","round","getWebPFileName","lastDotIndex","lastIndexOf","substring","DragAndDrop","onFilesAccepted","disabled","multiple","isDragging","setIsDragging","useState","dragError","setDragError","handleDragOver","useCallback","preventDefault","handleDragLeave","validateFiles","files","validFiles","Array","from","filter","file","isPngImage","handleDrop","dataTransfer","handleChange","target","value","handleDismissError","className","children","jsxRuntimeExports","onClick","XCircle","onDragOver","onDragLeave","onDrop","Upload","accept","onChange","id","htmlFor","ImagePreview","image","onRemove","title","name","Trash2","status","AlertTriangle","error","renderStatus","src","originalSrc","alt","convertedSrc","fetch","then","res","Download","ImageList","images","onRemoveImage","map","ConversionControls","quality","onQualityChange","onConvertAll","onDownloadAll","hasCompletedImages","isConverting","min","max","Number","RefreshCw","Header","ImageIcon","Footer","Info","Date","getFullYear","App","setImages","setQuality","setIsConverting","errorMessage","setErrorMessage","anyConverting","some","img","handleFilesAccepted","newImages","FileReader","random","toString","prev","handleQualityChange","newQuality","convertImage","async","updatedImage","Promise","resolve","reject","reader","onload","event","Image","canvas","width","height","ctx","getContext","drawImage","toBlob","Error","onerror","_a","result","readAsDataURL","convertToWebP","console","message","handleConvertAll","updatedImages","i","convertedImage","handleDownloadAll","forEach","handleRemoveImage","filtered","removedImage","find","useEffect","window","location","hostname","includes","options","immediate","onNeedRefresh","onOfflineReady","onRegistered","onRegisteredSW","onRegisterError","wb","registerPromise","navigator","__vitePreload","Workbox","import","__VITE_PRELOAD__","scope","catch","addEventListener","isUpdate","isExternal","reload","register","r","registerSW","log","getElementById","render","StrictMode"],"ignoreList":[0,1,2],"sources":["../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/react/jsx-runtime.js","../../node_modules/react-dom/client.js","../../src/utils/imageConverter.ts","../../src/components/DragAndDrop.tsx","../../src/components/ImagePreview.tsx","../../src/components/ImageList.tsx","../../src/components/ConversionControls.tsx","../../src/components/Header.tsx","../../src/components/Footer.tsx","../../src/App.tsx","../../src/main.tsx","../../../../@vite-plugin-pwa/virtual:pwa-register"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","/**\n * Converts a PNG image to WebP format\n * @param file The PNG file to convert\n * @param quality The quality of the WebP image (0-1)\n * @returns A promise that resolves to an object containing the WebP blob and its size\n */\nexport const convertToWebP = async (\n  file: File,\n  quality: number\n): Promise<{ blob: Blob; size: number }> => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    \n    reader.onload = (event) => {\n      const img = new Image();\n      \n      img.onload = () => {\n        // Create canvas\n        const canvas = document.createElement('canvas');\n        canvas.width = img.width;\n        canvas.height = img.height;\n        \n        // Draw image on canvas\n        const ctx = canvas.getContext('2d');\n        if (!ctx) {\n          reject(new Error('Failed to get canvas context'));\n          return;\n        }\n        \n        ctx.drawImage(img, 0, 0);\n        \n        // Convert to WebP\n        canvas.toBlob(\n          (blob) => {\n            if (!blob) {\n              reject(new Error('Failed to convert image'));\n              return;\n            }\n            \n            resolve({\n              blob,\n              size: blob.size\n            });\n          },\n          'image/webp',\n          quality\n        );\n      };\n      \n      img.onerror = () => {\n        reject(new Error('Failed to load image'));\n      };\n      \n      img.src = event.target?.result as string;\n    };\n    \n    reader.onerror = () => {\n      reject(new Error('Failed to read file'));\n    };\n    \n    reader.readAsDataURL(file);\n  });\n};\n\n/**\n * Creates a downloadable link for a blob\n * @param blob The blob to create a download link for\n * @param fileName The name to give the downloaded file\n */\nexport const downloadBlob = (blob: Blob, fileName: string): void => {\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = fileName;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n  URL.revokeObjectURL(url);\n};\n\n/**\n * Formats a file size in bytes to a human-readable string\n * @param bytes The file size in bytes\n * @returns A formatted string (e.g., \"1.5 MB\")\n */\nexport const formatFileSize = (bytes: number | null): string => {\n  if (bytes === null) return '-';\n  \n  const units = ['B', 'KB', 'MB', 'GB'];\n  let size = bytes;\n  let unitIndex = 0;\n  \n  while (size >= 1024 && unitIndex < units.length - 1) {\n    size /= 1024;\n    unitIndex++;\n  }\n  \n  return `${size.toFixed(1)} ${units[unitIndex]}`;\n};\n\n/**\n * Calculates the percentage saved between original and converted file sizes\n * @param originalSize The original file size in bytes\n * @param convertedSize The converted file size in bytes\n * @returns The percentage saved as a string\n */\nexport const calculateSavings = (originalSize: number, convertedSize: number | null): string => {\n  if (convertedSize === null) return '-';\n  \n  const saved = originalSize - convertedSize;\n  const percentage = (saved / originalSize) * 100;\n  \n  return `${Math.round(percentage)}%`;\n};\n\n/**\n * Generates a unique ID\n * @returns A unique string ID\n */\nexport const generateId = (): string => {\n  return Math.random().toString(36).substring(2, 11);\n};\n\n/**\n * Changes the file extension to .webp\n * @param fileName The original file name\n * @returns The file name with .webp extension\n */\nexport const getWebPFileName = (fileName: string): string => {\n  const lastDotIndex = fileName.lastIndexOf('.');\n  const baseName = lastDotIndex !== -1 ? fileName.substring(0, lastDotIndex) : fileName;\n  return `${baseName}.webp`;\n};\n\n/**\n * Checks if a file is a PNG image\n * @param file The file to check\n * @returns True if the file is a PNG image\n */\nexport const isPngImage = (file: File): boolean => {\n  return file.type === 'image/png';\n};","import React, { useCallback, useState } from 'react';\nimport { Upload, XCircle } from 'lucide-react';\nimport { isPngImage } from '../utils/imageConverter';\n\ninterface DragAndDropProps {\n  onFilesAccepted: (files: File[]) => void;\n  disabled?: boolean;\n  multiple?: boolean;\n}\n\nconst DragAndDrop: React.FC<DragAndDropProps> = ({\n  onFilesAccepted,\n  disabled = false,\n  multiple = false\n}) => {\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragError, setDragError] = useState<string | null>(null);\n  \n  const handleDragOver = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(true);\n  }, []);\n  \n  const handleDragLeave = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(false);\n  }, []);\n  \n  const validateFiles = useCallback((files: File[]): File[] => {\n    setDragError(null);\n    const validFiles = Array.from(files).filter(file => isPngImage(file));\n    \n    if (validFiles.length === 0) {\n      setDragError('Please select PNG images only');\n      return [];\n    }\n    \n    if (!multiple && validFiles.length > 1) {\n      return [validFiles[0]];\n    }\n    \n    return validFiles;\n  }, [multiple]);\n  \n  const handleDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(false);\n    \n    if (disabled) return;\n    \n    const validFiles = validateFiles(Array.from(e.dataTransfer.files));\n    if (validFiles.length > 0) {\n      onFilesAccepted(validFiles);\n    }\n  }, [disabled, onFilesAccepted, validateFiles]);\n  \n  const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (disabled || !e.target.files) return;\n    \n    const validFiles = validateFiles(Array.from(e.target.files));\n    if (validFiles.length > 0) {\n      onFilesAccepted(validFiles);\n    }\n    \n    // Reset the input\n    e.target.value = '';\n  }, [disabled, onFilesAccepted, validateFiles]);\n  \n  const handleDismissError = useCallback(() => {\n    setDragError(null);\n  }, []);\n  \n  return (\n    <div className=\"relative\">\n      {dragError && (\n        <div className=\"absolute top-0 left-0 right-0 bg-red-100 text-red-600 p-3 rounded-md flex items-center justify-between mb-4 animate-fadeIn\">\n          <span>{dragError}</span>\n          <button \n            onClick={handleDismissError}\n            className=\"text-red-500 hover:text-red-700 transition-colors\"\n            aria-label=\"Dismiss error\"\n          >\n            <XCircle size={18} />\n          </button>\n        </div>\n      )}\n      \n      <div\n        className={`mt-8 border-2 border-dashed rounded-lg p-8 text-center transition-all duration-200 ${\n          isDragging \n            ? 'border-blue-500 bg-blue-50' \n            : disabled \n              ? 'border-gray-300 bg-gray-50 cursor-not-allowed' \n              : 'border-gray-300 hover:border-blue-400 hover:bg-blue-50 cursor-pointer'\n        } ${dragError ? 'mt-16' : ''}`}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onDrop={handleDrop}\n      >\n        <div className=\"flex flex-col items-center justify-center space-y-3\">\n          <div className={`p-3 rounded-full ${\n            isDragging \n              ? 'bg-blue-100 text-blue-600' \n              : disabled \n                ? 'bg-gray-100 text-gray-400' \n                : 'bg-gray-100 text-gray-600'\n          }`}>\n            <Upload size={24} />\n          </div>\n          <div className=\"space-y-1\">\n            <h3 className={`text-lg font-medium ${disabled ? 'text-gray-400' : 'text-gray-700'}`}>\n              {multiple ? 'Upload PNG images' : 'Upload a PNG image'}\n            </h3>\n            <p className={`text-sm ${disabled ? 'text-gray-400' : 'text-gray-500'}`}>\n              Drag and drop, or click to select\n            </p>\n          </div>\n          \n          <input\n            type=\"file\"\n            accept=\"image/png\"\n            className=\"hidden\"\n            onChange={handleChange}\n            disabled={disabled}\n            multiple={multiple}\n            id=\"file-upload\"\n          />\n          <label\n            htmlFor=\"file-upload\"\n            className={`py-2 px-4 rounded-md text-sm font-medium ${\n              disabled\n                ? 'bg-gray-200 text-gray-400 cursor-not-allowed'\n                : 'bg-blue-600 text-white hover:bg-blue-700 cursor-pointer'\n            } transition-colors duration-200`}\n          >\n            Select {multiple ? 'files' : 'file'}\n          </label>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DragAndDrop;","import React from 'react';\nimport { Download, Trash2, AlertTriangle } from 'lucide-react';\nimport { ConversionImage } from '../types';\nimport { downloadBlob, formatFileSize, calculateSavings, getWebPFileName } from '../utils/imageConverter';\n\ninterface ImagePreviewProps {\n  image: ConversionImage;\n  onRemove: (id: string) => void;\n}\n\nconst ImagePreview: React.FC<ImagePreviewProps> = ({ image, onRemove }) => {\n  const handleDownload = () => {\n    if (image.convertedSrc && image.status === 'completed') {\n      fetch(image.convertedSrc)\n        .then(res => res.blob())\n        .then(blob => {\n          downloadBlob(blob, getWebPFileName(image.file.name));\n        });\n    }\n  };\n\n  const renderStatus = () => {\n    switch (image.status) {\n      case 'converting':\n        return (\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-blue-500 border-t-transparent\"></div>\n            <span className=\"text-blue-600\">Converting...</span>\n          </div>\n        );\n      case 'error':\n        return (\n          <div className=\"flex items-center space-x-2 text-red-500\">\n            <AlertTriangle size={16} />\n            <span>{image.error || 'Conversion failed'}</span>\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-md overflow-hidden animate-fadeIn\">\n      <div className=\"p-4 border-b\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"font-medium text-gray-800 truncate max-w-[200px]\" title={image.file.name}>\n            {image.file.name}\n          </h3>\n          <button\n            onClick={() => onRemove(image.id)}\n            className=\"text-gray-400 hover:text-red-500 transition-colors\"\n            aria-label=\"Remove image\"\n          >\n            <Trash2 size={18} />\n          </button>\n        </div>\n        {renderStatus()}\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 p-4\">\n        <div>\n          <h4 className=\"text-sm font-medium text-gray-500 mb-2\">Original (PNG)</h4>\n          <div className=\"aspect-square bg-gray-100 rounded-md flex items-center justify-center overflow-hidden\">\n            <img\n              src={image.originalSrc}\n              alt=\"Original\"\n              className=\"max-w-full max-h-full object-contain\"\n            />\n          </div>\n          <p className=\"mt-2 text-sm text-gray-600\">\n            Size: {formatFileSize(image.originalSize)}\n          </p>\n        </div>\n        \n        <div>\n          <h4 className=\"text-sm font-medium text-gray-500 mb-2\">Converted (WebP)</h4>\n          <div className=\"aspect-square bg-gray-100 rounded-md flex items-center justify-center overflow-hidden\">\n            {image.convertedSrc ? (\n              <img\n                src={image.convertedSrc}\n                alt=\"Converted\"\n                className=\"max-w-full max-h-full object-contain\"\n              />\n            ) : (\n              <div className=\"text-gray-400 text-sm\">Not converted yet</div>\n            )}\n          </div>\n          <p className=\"mt-2 text-sm text-gray-600\">\n            Size: {formatFileSize(image.convertedSize)}\n            {image.convertedSize && (\n              <span className=\"ml-2 text-green-600 font-medium\">\n                ({calculateSavings(image.originalSize, image.convertedSize)} saved)\n              </span>\n            )}\n          </p>\n        </div>\n      </div>\n\n      {image.status === 'completed' && (\n        <div className=\"p-4 border-t bg-gray-50\">\n          <button\n            onClick={handleDownload}\n            className=\"w-full py-2 px-4 bg-teal-600 hover:bg-teal-700 text-white rounded-md flex items-center justify-center space-x-2 transition-colors duration-200\"\n          >\n            <Download size={16} />\n            <span>Download WebP</span>\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ImagePreview;","import React from 'react';\nimport { ConversionImage } from '../types';\nimport ImagePreview from './ImagePreview';\n\ninterface ImageListProps {\n  images: ConversionImage[];\n  onRemoveImage: (id: string) => void;\n}\n\nconst ImageList: React.FC<ImageListProps> = ({ images, onRemoveImage }) => {\n  if (images.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-6\">\n      {images.map(image => (\n        <ImagePreview \n          key={image.id} \n          image={image} \n          onRemove={onRemoveImage} \n        />\n      ))}\n    </div>\n  );\n};\n\nexport default ImageList;","import React from 'react';\nimport { RefreshCw, Download } from 'lucide-react';\n\ninterface ConversionControlsProps {\n  quality: number;\n  onQualityChange: (quality: number) => void;\n  onConvertAll: () => void;\n  onDownloadAll: () => void;\n  hasCompletedImages: boolean;\n  isConverting: boolean;\n}\n\nconst ConversionControls: React.FC<ConversionControlsProps> = ({\n  quality,\n  onQualityChange,\n  onConvertAll,\n  onDownloadAll,\n  hasCompletedImages,\n  isConverting\n}) => {\n  const handleQualityChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onQualityChange(Number(e.target.value) / 100);\n  };\n  \n  return (\n    <div className=\"bg-white rounded-lg shadow-md p-4 mb-6\">\n      <div className=\"space-y-4\">\n        <div>\n          <label htmlFor=\"quality\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n            WebP Quality: {Math.round(quality * 100)}%\n          </label>\n          <input\n            type=\"range\"\n            id=\"quality\"\n            min=\"1\"\n            max=\"100\"\n            value={quality * 100}\n            onChange={handleQualityChange}\n            className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-blue-600\"\n          />\n          <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n            <span>Lower Quality</span>\n            <span>Better Quality</span>\n          </div>\n        </div>\n        \n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 mt-4\">\n          <button\n            onClick={onConvertAll}\n            disabled={isConverting}\n            className={`py-2 px-4 rounded-md flex items-center justify-center space-x-2 transition-colors duration-200 ${\n              isConverting\n                ? 'bg-gray-200 text-gray-500 cursor-not-allowed'\n                : 'bg-blue-600 text-white hover:bg-blue-700'\n            }`}\n          >\n            <RefreshCw size={16} className={isConverting ? 'animate-spin' : ''} />\n            <span>{isConverting ? 'Converting...' : 'Convert All'}</span>\n          </button>\n          \n          <button\n            onClick={onDownloadAll}\n            disabled={!hasCompletedImages}\n            className={`py-2 px-4 rounded-md flex items-center justify-center space-x-2 transition-colors duration-200 ${\n              !hasCompletedImages\n                ? 'bg-gray-200 text-gray-500 cursor-not-allowed'\n                : 'bg-teal-600 text-white hover:bg-teal-700'\n            }`}\n          >\n            <Download size={16} />\n            <span>Download All</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ConversionControls;","import React from 'react';\nimport { ImageIcon } from 'lucide-react';\n\nconst Header: React.FC = () => {\n  return (\n    <header className=\"py-6 mb-6\">\n      <div className=\"flex flex-col items-center text-center\">\n        <div className=\"bg-blue-100 p-3 rounded-full text-blue-600 mb-4\">\n          <ImageIcon size={32} />\n        </div>\n        <h1 className=\"text-3xl font-bold text-gray-800 mb-2\">PNG to WebP Converter</h1>\n        <p className=\"text-gray-600 max-w-2xl mx-auto\">\n          Convert your PNG images to WebP format right in your browser. No uploads to any server - \n          all conversions happen locally on your device for maximum privacy.\n        </p>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;","import React from 'react';\nimport { Info } from 'lucide-react';\n\nconst Footer: React.FC = () => {\n  return (\n    <footer className=\"py-8 mt-auto\">\n      <div className=\"max-w-xl mx-auto text-center\">\n        <div className=\"bg-blue-50 rounded-lg p-4 mb-6 flex items-start\">\n          <div className=\"text-blue-500 mr-3 flex-shrink-0 mt-0.5\">\n            <Info size={20} />\n          </div>\n          <p className=\"text-sm text-blue-800 text-left\">\n            WebP images typically reduce file size by 25-35% compared to PNG while maintaining similar quality,\n            resulting in faster website loading times and lower bandwidth usage.\n          </p>\n        </div>\n\n        <p className=\"text-sm text-gray-500\">\n          &copy; {new Date().getFullYear()} PNG to WebP Converter. All conversions happen locally in your browser - \n          no images are uploaded to any server.\n        </p>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;","import React, { useState, useCallback, useEffect } from 'react';\nimport { XCircle } from 'lucide-react';\nimport DragAndDrop from './components/DragAndDrop';\nimport ImageList from './components/ImageList';\nimport ConversionControls from './components/ConversionControls';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport { ConversionImage } from './types';\nimport { \n  convertToWebP, \n  downloadBlob, \n  generateId, \n  getWebPFileName \n} from './utils/imageConverter';\n\nconst App: React.FC = () => {\n  const [images, setImages] = useState<ConversionImage[]>([]);\n  const [quality, setQuality] = useState<number>(0.8); // 80% quality by default\n  const [isConverting, setIsConverting] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n\n  // Check if any image is in the converting state\n  const anyConverting = images.some(img => img.status === 'converting');\n  \n  // Check if there are any completed images for download all button\n  const hasCompletedImages = images.some(img => img.status === 'completed');\n\n  // Handle file uploads\n  const handleFilesAccepted = useCallback((files: File[]) => {\n    const newImages: ConversionImage[] = files.map(file => {\n      const reader = new FileReader();\n      const image: ConversionImage = {\n        id: generateId(),\n        file,\n        originalSrc: URL.createObjectURL(file),\n        convertedSrc: null,\n        originalSize: file.size,\n        convertedSize: null,\n        status: 'idle'\n      };\n      \n      return image;\n    });\n    \n    setImages(prev => [...prev, ...newImages]);\n    setErrorMessage(null);\n  }, []);\n\n  // Handle quality change\n  const handleQualityChange = useCallback((newQuality: number) => {\n    setQuality(newQuality);\n  }, []);\n\n  // Convert a single image\n  const convertImage = useCallback(async (image: ConversionImage): Promise<ConversionImage> => {\n    if (image.status === 'converting' || image.status === 'completed') {\n      return image;\n    }\n    \n    const updatedImage = { ...image, status: 'converting' };\n    \n    try {\n      const { blob, size } = await convertToWebP(image.file, quality);\n      const convertedSrc = URL.createObjectURL(blob);\n      \n      return {\n        ...updatedImage,\n        convertedSrc,\n        convertedSize: size,\n        status: 'completed'\n      };\n    } catch (error) {\n      console.error('Conversion error:', error);\n      return {\n        ...updatedImage,\n        status: 'error',\n        error: (error as Error).message\n      };\n    }\n  }, [quality]);\n\n  // Convert all images\n  const handleConvertAll = useCallback(async () => {\n    if (isConverting || images.length === 0) return;\n    \n    setIsConverting(true);\n    setErrorMessage(null);\n    \n    try {\n      const updatedImages = [...images];\n      \n      for (let i = 0; i < updatedImages.length; i++) {\n        if (updatedImages[i].status !== 'completed') {\n          const convertedImage = await convertImage(updatedImages[i]);\n          updatedImages[i] = convertedImage;\n          setImages([...updatedImages]); // Update state after each conversion\n        }\n      }\n    } catch (error) {\n      setErrorMessage((error as Error).message || 'An error occurred during conversion');\n    } finally {\n      setIsConverting(false);\n    }\n  }, [images, isConverting, convertImage]);\n\n  // Download all converted images\n  const handleDownloadAll = useCallback(() => {\n    if (!hasCompletedImages) return;\n    \n    images.forEach(image => {\n      if (image.status === 'completed' && image.convertedSrc) {\n        fetch(image.convertedSrc)\n          .then(res => res.blob())\n          .then(blob => {\n            downloadBlob(blob, getWebPFileName(image.file.name));\n          });\n      }\n    });\n  }, [images, hasCompletedImages]);\n\n  // Remove an image\n  const handleRemoveImage = useCallback((id: string) => {\n    setImages(prev => {\n      const filtered = prev.filter(img => img.id !== id);\n      \n      // Revoke object URLs for the removed image to prevent memory leaks\n      const removedImage = prev.find(img => img.id === id);\n      if (removedImage) {\n        if (removedImage.originalSrc) URL.revokeObjectURL(removedImage.originalSrc);\n        if (removedImage.convertedSrc) URL.revokeObjectURL(removedImage.convertedSrc);\n      }\n      \n      return filtered;\n    });\n  }, []);\n\n  // Clean up object URLs when component unmounts\n  useEffect(() => {\n    return () => {\n      images.forEach(image => {\n        if (image.originalSrc) URL.revokeObjectURL(image.originalSrc);\n        if (image.convertedSrc) URL.revokeObjectURL(image.convertedSrc);\n      });\n    };\n  }, [images]);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex flex-col\">\n      <div className=\"container max-w-screen-xl mx-auto px-4 py-8 flex-grow\">\n        <Header />\n        \n        {errorMessage && (\n          <div className=\"bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded mb-6 flex items-center justify-between animate-fadeIn\">\n            <span>{errorMessage}</span>\n            <button \n              onClick={() => setErrorMessage(null)}\n              className=\"text-red-500 hover:text-red-700 transition-colors\"\n              aria-label=\"Dismiss error\"\n            >\n              <XCircle size={18} />\n            </button>\n          </div>\n        )}\n        \n        <DragAndDrop \n          onFilesAccepted={handleFilesAccepted} \n          disabled={anyConverting}\n          multiple={true}\n        />\n        \n        {images.length > 0 && (\n          <ConversionControls \n            quality={quality}\n            onQualityChange={handleQualityChange}\n            onConvertAll={handleConvertAll}\n            onDownloadAll={handleDownloadAll}\n            hasCompletedImages={hasCompletedImages}\n            isConverting={isConverting || anyConverting}\n          />\n        )}\n        \n        <ImageList \n          images={images}\n          onRemoveImage={handleRemoveImage}\n        />\n      </div>\n      \n      <Footer />\n    </div>\n  );\n};\n\nexport default App;","import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { registerSW } from 'virtual:pwa-register';\nimport App from './App.tsx';\nimport './index.css';\n\n// Only register service worker if not in StackBlitz\nconst isStackBlitz = window.location.hostname.includes('stackblitz');\n\nif (!isStackBlitz) {\n  registerSW({ \n    immediate: true,\n    onNeedRefresh() {\n      // Handle PWA updates if needed\n    },\n    onOfflineReady() {\n      console.log('App ready to work offline');\n    },\n  });\n}\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);","// src/client/build/register.ts\nvar autoUpdateMode = \"true\";\nvar selfDestroying = \"false\";\nvar auto = autoUpdateMode === \"true\";\nvar autoDestroy = selfDestroying === \"true\";\nfunction registerSW(options = {}) {\n  const {\n    immediate = false,\n    onNeedRefresh,\n    onOfflineReady,\n    onRegistered,\n    onRegisteredSW,\n    onRegisterError\n  } = options;\n  let wb;\n  let registerPromise;\n  let sendSkipWaitingMessage;\n  const updateServiceWorker = async (_reloadPage = true) => {\n    await registerPromise;\n    if (!auto) {\n      await sendSkipWaitingMessage?.();\n    }\n  };\n  async function register() {\n    if (\"serviceWorker\" in navigator) {\n      wb = await import(\"workbox-window\").then(({ Workbox }) => {\n        return new Workbox(\"/sw.js\", { scope: \"/\", type: \"classic\" });\n      }).catch((e) => {\n        onRegisterError?.(e);\n        return void 0;\n      });\n      if (!wb)\n        return;\n      sendSkipWaitingMessage = async () => {\n        await wb?.messageSkipWaiting();\n      };\n      if (!autoDestroy) {\n        if (auto) {\n          wb.addEventListener(\"activated\", (event) => {\n            if (event.isUpdate || event.isExternal)\n              window.location.reload();\n          });\n          wb.addEventListener(\"installed\", (event) => {\n            if (!event.isUpdate) {\n              onOfflineReady?.();\n            }\n          });\n        } else {\n          let onNeedRefreshCalled = false;\n          const showSkipWaitingPrompt = () => {\n            onNeedRefreshCalled = true;\n            wb?.addEventListener(\"controlling\", (event) => {\n              if (event.isUpdate)\n                window.location.reload();\n            });\n            onNeedRefresh?.();\n          };\n          wb.addEventListener(\"installed\", (event) => {\n            if (typeof event.isUpdate === \"undefined\") {\n              if (typeof event.isExternal !== \"undefined\") {\n                if (event.isExternal)\n                  showSkipWaitingPrompt();\n                else\n                  !onNeedRefreshCalled && onOfflineReady?.();\n              } else {\n                if (event.isExternal)\n                  window.location.reload();\n                else\n                  !onNeedRefreshCalled && onOfflineReady?.();\n              }\n            } else if (!event.isUpdate) {\n              onOfflineReady?.();\n            }\n          });\n          wb.addEventListener(\"waiting\", showSkipWaitingPrompt);\n          wb.addEventListener(\"externalwaiting\", showSkipWaitingPrompt);\n        }\n      }\n      wb.register({ immediate }).then((r) => {\n        if (onRegisteredSW)\n          onRegisteredSW(\"/sw.js\", r);\n        else\n          onRegistered?.(r);\n      }).catch((e) => {\n        onRegisterError?.(e);\n      });\n    }\n  }\n  registerPromise = register();\n  return updateServiceWorker;\n}\nexport {\n  registerSW\n};\n"],"file":"assets/index-DH7N0aWN.js"}